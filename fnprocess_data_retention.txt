--select fnprocess_data_retention()

CREATE OR REPLACE FUNCTION public.fnprocess_data_retention()
    RETURNS void
    LANGUAGE 'plpgsql'
    
    
AS $BODY$

DECLARE
vperiod_boundary timestamp;
vstart_time timestamp;

BEGIN

--insert default retention periods for data sets.
IF NOT EXISTS (SELECT 1 FROM data_retention_setup where dataset = 'agg_customer_network') THEN
  insert into data_retention_setup (dataset, retention_1min, retention_hourly, retention_daily) values ('agg_customer_network', 1440, 744, 365);
END IF;

--prune agg_customer_network data set
vstart_time = clock_timestamp();
vperiod_boundary = current_timestamp - ((select retention_1min from data_retention_setup where dataset = 'agg_customer_network') ||' minutes')::interval;
RAISE NOTICE 'agg_customer_network_1min boundary: %', vperiod_boundary;
delete from agg_customer_network_1min where call_time < vperiod_boundary;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));

vstart_time = clock_timestamp();
vperiod_boundary = current_timestamp - ((select retention_hourly from data_retention_setup where dataset = 'agg_customer_network') ||' hours')::interval;
RAISE NOTICE 'agg_customer_network_hourly boundary: %', vperiod_boundary;
delete from agg_customer_network_hourly where call_time < vperiod_boundary;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));

vstart_time = clock_timestamp();
vperiod_boundary = current_timestamp - ((select retention_daily from data_retention_setup where dataset = 'agg_customer_network') ||' days')::interval;
RAISE NOTICE 'agg_customer_network_daily boundary: %', vperiod_boundary;
delete from agg_customer_network_daily where call_time < vperiod_boundary;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));




END;
$BODY$;

ALTER FUNCTION public.fnprocess_data_retention()
    OWNER TO postgres;
	