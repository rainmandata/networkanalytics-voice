-- FUNCTION: public.fnprocess_cdr_carrier()

--DESCRIPTION: This function will process a batch of carrier CDR. If
--you supply the batch_id parameter, it will process that batch. If you do not
--then it will choose the oldest batch that has not received in any new records
--in the last 10 seconds.
--Note: If a CDR batch gets borked, you can delete the row from agg_carrier_batch, resubmit the CDR to cdr_carrier
--and Rain Man will clear out the previous entries for that batch automatically.


--DEPENDENCIES--
--Table: cdr_carrier
--Table: agg_carrier_batch
--Table: trunk_groups_carrier
--Table: agg_carrier_network_1min
--Table: agg_carrier_network_hourly
--Table: agg_carrier_network_daily
--Table: agg_carrier_network_sipcode_1min
--Table: agg_carrier_network_sipcode_hourly
--Table: agg_carrier_network_sipcode_daily

--PSEUDO-DEPENDENCIES--
--Some dependencies are only required for specific statistics.
--1. None




--TODO: create indices with fill factor = 100
--TODO: Add execution of custom function so people can add custom behavior without modifying this function directly.

-- DROP FUNCTION public.fnprocess_cdr_carrier(text);
--Manually execute function with batch auto-detect: SELECT public.fnprocess_cdr_carrier(null)


CREATE OR REPLACE FUNCTION public.fnprocess_cdr_carrier(
in_batch_id text --TODO: convert to array to process multiple batches per execution.
	)
    RETURNS void
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
AS $BODY$

DECLARE 
vstart_time timestamp;
--vend_time timestamp;

BEGIN

RAISE NOTICE 'Determining which batch to process: %', clock_timestamp();
vstart_time = clock_timestamp();
drop table if exists tmp_batches_carrier;
create temporary table tmp_batches_carrier (batch_id text not null);

--get oldest batch and run it if no batch_id was supplied.
if (in_batch_id is null) then
	drop table if exists tmp_batches_received_carrier;
	create table tmp_batches_received_carrier as
		select batch_id, max(received_time) as "last_update" from cdr_carrier group by batch_id;

	insert into tmp_batches_carrier
		select batch_id from tmp_batches_received_carrier where last_update < (now() - INTERVAL '10 seconds') and batch_id not in (select batch_id from agg_carrier_batch where batch_id != 'CDR_REVIEW') order by last_update limit 1;
else
	insert into tmp_batches_carrier (batch_id) values (in_batch_id);
end if;

RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
RAISE NOTICE 'BatchID: %', (select batch_id from tmp_batches_carrier limit 1);

if (select batch_id from tmp_batches_carrier limit 1) is null then
	--select * from tmp_batches_carrier;
	RAISE NOTICE 'No batches found to process. Exiting';
	return;
end if;



--normalize secondary fields
RAISE NOTICE 'Normalizing secondary fields: %', clock_timestamp();
vstart_time = clock_timestamp();
--add custom handling here.
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));

--normalize juris
RAISE NOTICE 'Normalizing jurisdiction: %', clock_timestamp();
vstart_time = clock_timestamp();
update cdr_carrier set juris = 'E' where juris in ('INTERSTATE');
update cdr_carrier set juris = 'A' where juris in ('INTRASTATE');
update cdr_carrier set juris = 'U' where juris in ('NON-JURISDICTIONAL', 'INDETERMINATE');
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));


--normalize ani
RAISE NOTICE 'Normalizing ANIs: %', clock_timestamp();
vstart_time = clock_timestamp();
update cdr_carrier set ani = replace(ani, '+', '') where ani like '+%';
update cdr_carrier set ani = '1' || ani where length(ani) = 10 and juris in ('E', 'A', 'U');
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));

--normalize dnis
RAISE NOTICE 'Normalizing DNISs: %', clock_timestamp();
vstart_time = clock_timestamp();
update cdr_carrier set dnis = '1' || dnis where length(dnis) = 10 and juris in ('E', 'A', 'U');
update cdr_carrier set juris = 'TFT' where left(dnis, 4) in ('1800', '1822', '1844', '1855', '1866', '1877', '1888');
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));

--normalize lrn
RAISE NOTICE 'Normalizing LRN: %', clock_timestamp();
vstart_time = clock_timestamp();
update cdr_carrier set lrn = '1' || lrn where length(lrn) = 10 and juris in ('E', 'A', 'U');
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));

--populate routing_prefix if not sent. If not sent, we have to assume LRN-based routing with fallback to dnis-based routing.
RAISE NOTICE 'Determining routing_prefix: %', clock_timestamp();
vstart_time = clock_timestamp();
update cdr_carrier set routing_prefix = left(lrn, 7) where length(lrn) = 11 and routing_prefix is null and juris in ('E', 'A', 'U');
update cdr_carrier set routing_prefix = left(dnis, 7) where length(dnis) = 11 and routing_prefix is null and juris in ('E', 'A', 'U');
update cdr_carrier set routing_prefix = left(dnis, 4) where length(dnis) = 11 and routing_prefix is null and juris in ('TFT');
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));

--populate duration_billed if not sent
--TODO: Add code to pull billing intervals from customer deck if loaded.
RAISE NOTICE 'Determining duration_billed: %', clock_timestamp();
vstart_time = clock_timestamp();
update cdr_carrier set duration_billed = duration where duration_billed is null;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));

--calculate carrier_cost if not supplied
RAISE NOTICE 'Determining carrier_cost: %', clock_timestamp();
vstart_time = clock_timestamp();
update cdr_carrier set carrier_cost = carrier_rate * (duration_billed / 60) where carrier_cost is null;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));


--generate 1-min carrier-side network agg
RAISE NOTICE 'Aggregating agg_carrier_network_1min: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_network_1min where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_network_1min
	(batch_id, call_time, attempts, attempts_ner, completions, duration, duration_billed, carrier_cost, sd, code_487, code_404, lcr_depth)
select 
cdr.batch_id
, date_trunc('minute', min(call_time)) as "call_time"
, count(*) as "attempts"
, sum(case when sip_code like '4%' then 0 else 1 end) as "attempts_ner"
, sum(case cdr.sip_code when '200' then 1 else 0 end) as "completions"
, sum(duration) as "duration"
, sum(duration_billed) as "duration_billed"
, sum(carrier_cost) as "carrier_cost"
, sum(case when duration between 1 and 6 then 1 else 0 end) as "sd"
, sum(case sip_code when '487' then 1 else 0 end) as "code_487"
, sum(case sip_code when '404' then 1 else 0 end) as "code_404"
, sum(lcr_depth) as "lcr_depth"
	   from cdr_carrier as cdr
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = cdr.batch_id
	   group by cdr.batch_id, date_trunc('minute', "call_time");
--select * from agg_carrier_network_1min order by call_time desc limit 100000
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));

RAISE NOTICE 'Aggregating agg_carrier_network_hourly: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_network_hourly where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_network_hourly
	(batch_id, call_time, attempts, attempts_ner, completions, duration, duration_billed, carrier_cost, sd, code_487, code_404, lcr_depth)
select 
agg.batch_id
, date_trunc('hour', min(call_time)) as "call_time"
, sum(attempts) as "attempts"
, sum(attempts_ner) as "attempts_ner"
, sum(completions) as "completions"
, sum(duration) as "duration"
, sum(duration_billed) as "duration_billed"
, sum(carrier_cost) as "carrier_cost"
, sum(sd) as "sd"
, sum(code_487) as "code_487"
, sum(code_404) as "code_404"
, sum(lcr_depth) as "lcr_depth"
	   from agg_carrier_network_1min as agg
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = agg.batch_id
	   group by agg.batch_id, date_trunc('hour', "call_time");
--select * from agg_carrier_network_hourly order by call_time desc limit 100000
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));



RAISE NOTICE 'Aggregating agg_carrier_network_daily: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_network_daily where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_network_daily
	(batch_id, call_time, attempts, attempts_ner, completions, duration, duration_billed, carrier_cost, sd, code_487, code_404, lcr_depth)
select 
agg.batch_id
, date_trunc('day', min(call_time)) as "call_time"
, sum(attempts) as "attempts"
, sum(attempts_ner) as "attempts_ner"
, sum(completions) as "completions"
, sum(duration) as "duration"
, sum(duration_billed) as "duration_billed"
, sum(carrier_cost) as "carrier_cost"
, sum(sd) as "sd"
, sum(code_487) as "code_487"
, sum(code_404) as "code_404"
, sum(lcr_depth) as "lcr_depth"
	   from agg_carrier_network_hourly as agg
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = agg.batch_id
	   group by agg.batch_id, date_trunc('day', "call_time");
--select * from agg_carrier_network_daily order by call_time desc limit 100000
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));


--TODO add agg_carrier_customertg_1min




--generate 1-min carrier-side signalip agg
/*
RAISE NOTICE 'Aggregating agg_carrier_signalip_1min: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_signalip_1min where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_signalip_1min
	(batch_id, call_time, signal_ip, tg_id, attempts, attempts_ner, attempts_acr, attempts_dcr, attempts_rvm, completions, duration, duration_billed, revenue, carrier_cost, sd, code_487, code_404)
select 
cdr.batch_id
, date_trunc('minute', min(call_time)) as "call_time"
, signal_ip
, tg_id
, count(*) as "attempts"
, sum(case when sip_code like '4%' then 0 else 1 end) as "attempts_ner"
, count(distinct(ani)) as "attempts_acr"
, count(distinct(dnis)) as "attempts_dcr"
, null as "attempts_rvm"
, sum(case cdr.sip_code when '200' then 1 else 0 end) as "completions"
, sum(duration) as "duration"
, sum(duration_billed) as "duration_billed"
, sum(customer_revenue) as "revenue"
, sum(carrier_cost) as "carrier_cost"
, sum(case when duration between 1 and 6 then 1 else 0 end) as "sd"
, sum(case sip_code when '487' then 1 else 0 end) as "code_487"
, sum(case sip_code when '404' then 1 else 0 end) as "code_404"
	   from cdr_carrier as cdr
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = cdr.batch_id
	   where signal_ip is not null
	   group by cdr.batch_id, date_trunc('minute', "call_time"), signal_ip, tg_id;
--select * from agg_carrier_signalip_1min order by call_time desc limit 100000
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/

/*
RAISE NOTICE 'Aggregating agg_carrier_signalip_hourly: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_signalip_hourly where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_signalip_hourly
	(batch_id, call_time, signal_ip, tg_id, attempts, attempts_ner, attempts_acr, attempts_dcr, attempts_rvm, completions, duration, duration_billed, revenue, carrier_cost, sd, code_487, code_404)
select 
agg.batch_id
, date_trunc('hour', min(call_time)) as "call_time"
, signal_ip
, tg_id
, sum(attempts) as "attempts"
, sum(attempts_ner) as "attempts_ner"
, sum(attempts_acr) as "attempts_acr"
, sum(attempts_dcr) as "attempts_dcr"
, null as "attempts_rvm"
, sum(completions) as "completions"
, sum(duration) as "duration"
, sum(duration_billed) as "duration_billed"
, sum(revenue) as "revenue"
, sum(carrier_cost) as "carrier_cost"
, sum(sd) as "sd"
, sum(code_487) as "code_487"
, sum(code_404) as "code_404"
	   from agg_carrier_signalip_1min as agg
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = agg.batch_id
	   where signal_ip is not null
	   group by agg.batch_id, date_trunc('hour', "call_time"), signal_ip, tg_id;
--select * from agg_carrier_signalip_hourly order by call_time desc limit 100000
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/

/*
RAISE NOTICE 'Aggregating agg_carrier_signalip_daily: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_signalip_daily where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_signalip_daily
	(batch_id, call_time, signal_ip, tg_id, attempts, attempts_ner, attempts_acr, attempts_dcr, attempts_rvm, completions, duration, duration_billed, revenue, carrier_cost, sd, code_487, code_404)
select 
agg.batch_id
, date_trunc('day', min(call_time)) as "call_time"
, signal_ip
, tg_id
, sum(attempts) as "attempts"
, sum(attempts_ner) as "attempts_ner"
, sum(attempts_acr) as "attempts_acr"
, sum(attempts_dcr) as "attempts_dcr"
, null as "attempts_rvm"
, sum(completions) as "completions"
, sum(duration) as "duration"
, sum(duration_billed) as "duration_billed"
, sum(revenue) as "revenue"
, sum(carrier_cost) as "carrier_cost"
, sum(sd) as "sd"
, sum(code_487) as "code_487"
, sum(code_404) as "code_404"
	   from agg_carrier_signalip_hourly as agg
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = agg.batch_id
	   where signal_ip is not null
	   group by agg.batch_id, date_trunc('day', "call_time"), signal_ip, tg_id;
--select * from agg_carrier_signalip_daily order by call_time desc limit 100000
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/



--generate 1-min carrier-side mediaip agg
/*
RAISE NOTICE 'Aggregating agg_carrier_mediaip_1min: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_mediaip_1min where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_mediaip_1min
	(batch_id, call_time, tg_id, media_ip, attempts, attempts_ner, attempts_acr, attempts_dcr, attempts_rvm, completions, duration, duration_billed, revenue, sd, code_487, code_404)
select 
cdr.batch_id
, date_trunc('minute', min(call_time)) as "call_time"
, tg_id
, media_ip
, count(*) as "attempts"
, sum(case when sip_code like '4%' then 0 else 1 end) as "attempts_ner"
, count(distinct(ani)) as "attempts_acr"
, count(distinct(dnis)) as "attempts_dcr"
, null as "attempts_rvm"
, sum(case cdr.sip_code when '200' then 1 else 0 end) as "completions"
, sum(duration) as "duration"
, sum(duration_billed) as "duration_billed"
, sum(customer_revenue) as "revenue"
, sum(case when duration between 1 and 6 then 1 else 0 end) as "sd"
, sum(case sip_code when '487' then 1 else 0 end) as "code_487"
, sum(case sip_code when '404' then 1 else 0 end) as "code_404"
	   from cdr_carrier as cdr
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = cdr.batch_id
	   where media_ip is not null
	   group by cdr.batch_id, date_trunc('minute', "call_time"), tg_id, media_ip;
--select * from agg_carrier_mediaip_1min order by call_time desc limit 100000
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/

/*
RAISE NOTICE 'Aggregating agg_carrier_mediaip_hourly: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_mediaip_hourly where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_mediaip_hourly
	(batch_id, call_time, tg_id, media_ip, attempts, attempts_ner, attempts_acr, attempts_dcr, attempts_rvm, completions, duration, duration_billed, revenue, sd, code_487, code_404)
select 
agg.batch_id
, date_trunc('hour', min(call_time)) as "call_time"
, tg_id
, media_ip
, sum(attempts) as "attempts"
, sum(attempts_ner) as "attempts_ner"
, sum(attempts_acr) as "attempts_acr"
, sum(attempts_dcr) as "attempts_dcr"
, null as "attempts_rvm"
, sum(completions) as "completions"
, sum(duration) as "duration"
, sum(duration_billed) as "duration_billed"
, sum(revenue) as "revenue"
, sum(sd) as "sd"
, sum(code_487) as "code_487"
, sum(code_404) as "code_404"
	   from agg_carrier_mediaip_1min as agg
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = agg.batch_id
	   where media_ip is not null
	   group by agg.batch_id, date_trunc('hour', "call_time"), media_ip;
--select * from agg_carrier_mediaip_hourly order by call_time desc limit 100000
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/

/*
RAISE NOTICE 'Aggregating agg_carrier_mediaip_daily: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_mediaip_daily where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_mediaip_daily
	(batch_id, call_time, tg_id, media_ip, attempts, attempts_ner, attempts_acr, attempts_dcr, attempts_rvm, completions, duration, duration_billed, revenue, sd, code_487, code_404)
select 
agg.batch_id
, date_trunc('day', min(call_time)) as "call_time"
, tg_id
, media_ip
, sum(attempts) as "attempts"
, sum(attempts_ner) as "attempts_ner"
, sum(attempts_acr) as "attempts_acr"
, sum(attempts_dcr) as "attempts_dcr"
, null as "attempts_rvm"
, sum(completions) as "completions"
, sum(duration) as "duration"
, sum(duration_billed) as "duration_billed"
, sum(revenue) as "revenue"
, sum(sd) as "sd"
, sum(code_487) as "code_487"
, sum(code_404) as "code_404"
	   from agg_carrier_mediaip_hourly as agg
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = agg.batch_id
	   where media_ip is not null
	   group by agg.batch_id, date_trunc('day', "call_time"), tg_id, media_ip;
--select * from agg_carrier_mediaip_daily order by call_time desc limit 100000
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/

--generate carrier network-wide sip code aggs
RAISE NOTICE 'Aggregating agg_carrier_network_sipcode_1min: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_network_sipcode_1min where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_network_sipcode_1min
	(batch_id, call_time, sip_code, attempts)
select 
cdr.batch_id
, date_trunc('minute', min(call_time)) as "call_time"
, sip_code
, count(*) as "attempts"
	   from cdr_carrier as cdr
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = cdr.batch_id
	   group by cdr.batch_id, date_trunc('minute', "call_time"), sip_code;
--select * from agg_carrier_network_sipcode_1min order by call_time desc limit 100000;
--select sip_code from agg_carrier_network_sipcode_1min group by sip_code order by count(*) desc
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));


RAISE NOTICE 'Aggregating agg_carrier_network_sipcode_hourly: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_network_sipcode_hourly where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_network_sipcode_hourly
	(batch_id, call_time, sip_code, attempts)
select 
agg.batch_id
, date_trunc('hour', min(call_time)) as "call_time"
, sip_code
, sum(attempts) as "attempts"
	   from agg_carrier_network_sipcode_1min as agg
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = agg.batch_id
	   group by agg.batch_id, date_trunc('hour', "call_time"), sip_code;
--select * from agg_carrier_network_sipcode_hourly order by call_time desc limit 100000;
--select sip_code from agg_carrier_network_sipcode_hourly group by sip_code order by count(*) desc
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));


RAISE NOTICE 'Aggregating agg_carrier_network_sipcode_daily: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_network_sipcode_daily where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_network_sipcode_daily
	(batch_id, call_time, sip_code, attempts)
select 
agg.batch_id
, date_trunc('day', min(call_time)) as "call_time"
, sip_code
, sum(attempts) as "attempts"
	   from agg_carrier_network_sipcode_hourly as agg
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = agg.batch_id
	   group by agg.batch_id, date_trunc('day', "call_time"), sip_code;
--select * from agg_carrier_network_sipcode_daily order by call_time desc limit 100000;
--select sip_code from agg_carrier_network_sipcode_daily group by sip_code order by count(*) desc
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));



--generate tg 1-min agg
/*
RAISE NOTICE 'Aggregating agg_carrier_tg_1min: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_tg_1min where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_tg_1min (batch_id, call_time, tg_id, attempts, completions, duration, duration_billed, revenue, sd, code_487, code_404, lcr_depth_completed, lcr_depth_incomplete, lcr_depth_all, lack_cap, ring_time, ring_time_before_cancel, attempts_npr, carrier_cost)
select cdr.batch_id
, date_trunc('minute', min(call_time)) as "call_time"
, tg_id
, count(*) as "attempts"
, sum(case cdr.sip_code when '200' then 1 else 0 end) as "completions"
, sum(duration) as "duration"
, sum(duration_billed) as "duration_billed"
, sum(customer_revenue) as "revenue"
, sum(case when duration between 1 and 6 then 1 else 0 end) as "sd"
, sum(case sip_code when '487' then 1 else 0 end) as "code_487"
, sum(case sip_code when '404' then 1 else 0 end) as "code_404"
, sum(case duration when 0 then null else lcr_depth end) as "lcr_depth_completed"
, sum(case duration when 0 then lcr_depth else null end) as "lcr_depth_incomplete"
, sum(lcr_depth) as "lcr_depth_all"
, sum(case sip_code when '521' then 1 when '523' then 1 when '525' then 1 when '533' then 1 else 0 end) as "lack_cap"
, sum(ring_time) as "ring_time"
, sum(case sip_code when '487' then ring_time else null end) as "ring_time_before_cancel"
, sum(case sip_code when 'NPR' then 1 else 0 end) as "attempts_npr"
, sum(carrier_cost) as "carrier_cost"
	   from cdr_carrier as cdr
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = cdr.batch_id
	   group by cdr.batch_id, date_trunc('minute', "call_time"), tg_id;
	   
	   --select * from agg_carrier_tg_1min order by call_time desc limit 100000;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/


/*
RAISE NOTICE 'Aggregating agg_carrier_tg_hourly: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_tg_hourly where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_tg_hourly (batch_id, call_time, tg_id, attempts, completions, duration, duration_billed, revenue, sd, code_487, code_404, lcr_depth_completed, lcr_depth_incomplete, lcr_depth_all, lack_cap, ring_time, ring_time_before_cancel, attempts_npr, carrier_cost)
select agg.batch_id
, date_trunc('hour', min(call_time)) as "call_time"
, tg_id
, sum(attempts) as "attempts"
, sum(completions) as "completions"
, sum(duration) as "duration"
, sum(duration_billed) as "duration_billed"
, sum(revenue) as "revenue"
, sum(sd) as "sd"
, sum(code_487) as "code_487"
, sum(code_404) as "code_404"
, sum(lcr_depth_completed) as "lcr_depth_completed"
, sum(lcr_depth_incomplete) as "lcr_depth_incomplete"
, sum(lcr_depth_all) as "lcr_depth_all"
, sum(lack_cap) as "lack_cap"
, sum(ring_time) as "ring_time"
, sum(ring_time_before_cancel) as "ring_time_before_cancel"
, sum(attempts_npr) as "attempts_npr"
, sum(carrier_cost) as "carrier_cost"
	   from agg_carrier_tg_1min as agg
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = agg.batch_id
	   group by agg.batch_id, date_trunc('hour', "call_time"), tg_id;
	   
	   --select * from agg_customer_tg_hourly order by call_time desc limit 100000;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/

/*
RAISE NOTICE 'Aggregating agg_carrier_tg_daily: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_tg_daily where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_tg_daily (batch_id, call_time, tg_id, attempts, completions, duration, duration_billed, revenue, sd, code_487, code_404, lcr_depth_completed, lcr_depth_incomplete, lcr_depth_all, lack_cap, ring_time, ring_time_before_cancel, attempts_npr, carrier_cost)
select agg.batch_id
, date_trunc('day', min(call_time)) as "call_time"
, tg_id
, sum(attempts) as "attempts"
, sum(completions) as "completions"
, sum(duration) as "duration"
, sum(duration_billed) as "duration_billed"
, sum(revenue) as "revenue"
, sum(sd) as "sd"
, sum(code_487) as "code_487"
, sum(code_404) as "code_404"
, sum(lcr_depth_completed) as "lcr_depth_completed"
, sum(lcr_depth_incomplete) as "lcr_depth_incomplete"
, sum(lcr_depth_all) as "lcr_depth_all"
, sum(lack_cap) as "lack_cap"
, sum(ring_time) as "ring_time"
, sum(ring_time_before_cancel) as "ring_time_before_cancel"
, sum(attempts_npr) as "attempts_npr"
, sum(carrier_cost) as "carrier_cost"
	   from agg_carrier_tg_hourly as agg
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = agg.batch_id
	   group by agg.batch_id, date_trunc('day', "call_time"), tg_id;
	   
	   --select * from agg_carrier_tg_daily order by call_time desc limit 100000;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/




--generate tg prefix 1-min agg
/*
RAISE NOTICE 'Aggregating agg_carrier_routingprefix_1min: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_tg_routingprefix_1min where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_tg_routingprefix_1min (batch_id, call_time, tg_id, routing_prefix, attempts, completions, lcr_depth)
select cdr.batch_id
, date_trunc('minute', min(call_time)) as "call_time"
, tg_id
, routing_prefix
, count(*) as "attempts"
, sum(case cdr.sip_code when '200' then 1 else 0 end) as "completions"
, sum(lcr_depth) as "lcr_depth"
		--, sum(duration) as "duration"
	   --, sum(duration_billed) as "duration_billed"
	   --, sum(revenue) as "revenue"
	   --sum(case when duration between 1 and 6 then 1 else 0 end) as "sdr"
	   --sum(case sip_code when '487' then 1 else 0 end) as "code_",
	   --sum(case sip_code when '404' then 1 else 0 end)
	   from cdr_carrier as cdr
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = cdr.batch_id
	   group by cdr.batch_id, date_trunc('minute', "call_time"), tg_id, routing_prefix;
	   
	   --select * from agg_carrier_tg_routingprefix_1min order by call_time desc limit 100000;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/

/*
RAISE NOTICE 'Aggregating agg_carrier_routingprefix_hourly: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_tg_routingprefix_hourly where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_tg_routingprefix_hourly (batch_id, call_time, tg_id, routing_prefix, attempts, completions, lcr_depth)
select agg.batch_id
, date_trunc('hour', min(call_time)) as "call_time"
, tg_id
, routing_prefix
, sum(attempts) as "attempts"
, sum(completions) as "completions"
, sum(lcr_depth) as "lcr_depth"
	   from agg_carrier_tg_routingprefix_1min as agg
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = agg.batch_id
	   group by agg.batch_id, date_trunc('hour', "call_time"), tg_id, routing_prefix;
	   
	   --select * from agg_carrier_tg_routingprefix_hourly order by call_time desc limit 100000;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/

/*
RAISE NOTICE 'Aggregating agg_carrier_routingprefix_daily: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_tg_routingprefix_daily where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_tg_routingprefix_daily (batch_id, call_time, tg_id, routing_prefix, attempts, completions, lcr_depth)
select agg.batch_id
, date_trunc('day', min(call_time)) as "call_time"
, tg_id
, routing_prefix
, sum(attempts) as "attempts"
, sum(completions) as "completions"
, sum(lcr_depth) as "lcr_depth"
	   from agg_carrier_tg_routingprefix_hourly as agg
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = agg.batch_id
	   group by agg.batch_id, date_trunc('day', "call_time"), tg_id, routing_prefix;
	   
	   --select * from agg_carrier_tg_routingprefix_daily order by call_time desc limit 100000;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/

--generate tg prefix/juris 1-min agg
--create table agg_carrier_tg_prefix_juris_1min as
/* BETA
RAISE NOTICE 'Aggregating agg_carrier_prefix_juris_1min: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from agg_carrier_tg_prefix_juris_1min where batch_id in (select batch_id from tmp_batches_carrier);
insert into agg_carrier_tg_prefix_juris_1min (batch_id, call_time, tg_id, routing_prefix, juris, attempts, completions, lcr_depth)
select cdr.batch_id
, date_trunc('minute', min(call_time)) as "call_time"
, tg_id
, routing_prefix
, juris
, count(*) as "attempts"
, sum(case cdr.sip_code when '200' then 1 else 0 end) as "completions"
		--, sum(duration) as "duration"
	   --, sum(duration_billed) as "duration_billed"
	   --, sum(revenue) as "revenue"
	   --sum(case when duration between 1 and 6 then 1 else 0 end) as "sdr"
	   --sum(case sip_code when '487' then 1 else 0 end) as "code_",
	   --sum(case sip_code when '404' then 1 else 0 end)
, sum(lcr_depth) as "lcr_depth"	   
	   from cdr_carrier as cdr
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = cdr.batch_id
	   group by cdr.batch_id, date_trunc('minute', "call_time"), tg_id, routing_prefix, juris;
	   
	   --select * from agg_carrier_tg_prefix_juris_1min order by call_time desc limit 100000;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/



--record bad numbers (404)
--TODO: Add code to reset the expires_at instead of just appending a second enty of same number.
--TODO: add trusted_404 to trunk_groups_carrier
/* BETA
RAISE NOTICE 'Aggregating bad_numbers: %', clock_timestamp();
vstart_time = clock_timestamp();
insert into bad_numbers (dnis, created_at, expires_at)
	select dnis, now(), now() + interval '10' day
	from cdr_carrier as cdr
	inner join tmp_batches_carrier as tmp on tmp.batch_id = cdr.batch_id
	where sip_code = '404'
	group by dnis;
	
	--select * from bad_numbers order by created_at desc limit 100000;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/

--close off the batch. KEEP AT BOTTOM
RAISE NOTICE 'Aggregating agg_carrier_batch: %', clock_timestamp();
vstart_time = clock_timestamp();
insert into agg_carrier_batch (batch_id, attempts, completions, duration, duration_billed, carrier_cost, sd, code_487, code_404, start_time, end_time, most_recent_cdr)
select cdr.batch_id
, count(*) as "attempts"
, sum(case cdr.sip_code when '200' then 1 else 0 end) as "completions"
, sum(duration) as "duration"
, sum(duration_billed) as "duration_billed"
, sum(cdr.carrier_cost) as "carrier_cost"
, sum(case when duration between 1 and 6 then 1 else 0 end)
, sum(case sip_code when '487' then 1 else 0 end)
, sum(case sip_code when '404' then 1 else 0 end)
, now()
, clock_timestamp()
, max(call_time) as "most_recent_cdr"
	   from cdr_carrier as cdr
	   inner join tmp_batches_carrier as tmp on tmp.batch_id = cdr.batch_id
	   group by cdr.batch_id;
--select * from agg_carrier_batch order by processed_time desc;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));

/*
RAISE NOTICE 'Create carrier TGs that don''t already exist: %', clock_timestamp();
vstart_time = clock_timestamp();
insert into trunk_groups_carrier (tg_id, status, carrier_id, tg_name)
select tg_id, 'new', 'XX', '' from cdr_carrier where tg_id not in (select tg_id from trunk_groups_carrier) group by tg_id;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/
--select * from trunk_groups_carrier order by created_at desc

/*
RAISE NOTICE 'Create signal IPs that don''t already exist: %', clock_timestamp();
vstart_time = clock_timestamp();
insert into signal_ips_carrier (signal_ip, tg_id)
select signal_ip, tg_id from cdr_carrier where signal_ip || tg_id not in (select signal_ip || tg_id from signal_ips_carrier) group by signal_ip, tg_id;
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));
*/
--select * from signal_ips_carrier order by created_at desc




--TODO: purge batches we have processed
RAISE NOTICE 'Deleting processed batch: %', clock_timestamp();
vstart_time = clock_timestamp();
delete from cdr_carrier where batch_id in (select batch_id from tmp_batches_carrier) and batch_id != 'CDR_REVIEW';
RAISE NOTICE 'Runtime (sec): %', (SELECT EXTRACT(EPOCH FROM clock_timestamp() - vstart_time));

RAISE NOTICE 'DONE: %', clock_timestamp();

--vacuum (full, analyze);

END;
$BODY$;

ALTER FUNCTION public.fnprocess_cdr_carrier(text)
    OWNER TO postgres;
